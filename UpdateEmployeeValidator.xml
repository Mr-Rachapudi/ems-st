<?xml version="1.0"?>
<st-source>
<class>
<class-id>UpdateEmployeeValidator</class-id>
<superclass>Object</superclass>
<instance-variables></instance-variables>
<class-variables></class-variables>
<pool-dictionaries></pool-dictionaries>
<methods>
<body package="EmployeeManagement-Validation" selector="validateEmployeeForUpdate:">
validateEmployeeForUpdate: anEmployee
    | errors |
    errors := OrderedCollection new.
    
    self validateEmployeeId: anEmployee id errors: errors.
    self validateName: anEmployee name errors: errors.
    self validateEmail: anEmployee email errors: errors.
    self validateDepartment: anEmployee department errors: errors.
    self validateSalary: anEmployee salary errors: errors.
    self validateHireDate: anEmployee hireDate errors: errors.
    
    ^errors
</body>
<body package="EmployeeManagement-Validation" selector="validateEmployeeId:errors:">
validateEmployeeId: anId errors: errors
    anId ifNil: [errors add: 'Employee ID cannot be nil for update'. ^self].
    anId isInteger ifFalse: [errors add: 'Employee ID must be an integer'. ^self].
    anId <= 0 ifTrue: [errors add: 'Employee ID must be greater than 0'. ^self].
</body>
<body package="EmployeeManagement-Validation" selector="validateName:errors:">
validateName: aName errors: errors
    aName ifNil: [errors add: 'Name cannot be nil'. ^self].
    aName isEmpty ifTrue: [errors add: 'Name cannot be empty'. ^self].
    aName size < 2 ifTrue: [errors add: 'Name must be at least 2 characters long'. ^self].
    aName size > 100 ifTrue: [errors add: 'Name cannot exceed 100 characters'. ^self].
    (aName allSatisfy: [:char | char isLetter or: [char = $ ]]) ifFalse: [
        errors add: 'Name can only contain letters and spaces'
    ].
</body>
<body package="EmployeeManagement-Validation" selector="validateEmail:errors:">
validateEmail: anEmail errors: errors
    | atIndex dotIndex |
    anEmail ifNil: [errors add: 'Email cannot be nil'. ^self].
    anEmail isEmpty ifTrue: [errors add: 'Email cannot be empty'. ^self].
    anEmail size > 255 ifTrue: [errors add: 'Email cannot exceed 255 characters'. ^self].
    
    atIndex := anEmail indexOf: $@.
    atIndex = 0 ifTrue: [errors add: 'Email must contain @ symbol'. ^self].
    atIndex = 1 ifTrue: [errors add: 'Email must have characters before @ symbol'. ^self].
    atIndex = anEmail size ifTrue: [errors add: 'Email must have characters after @ symbol'. ^self].
    
    dotIndex := anEmail indexOf: $. startingAt: atIndex.
    dotIndex = 0 ifTrue: [errors add: 'Email must contain a dot after @ symbol'. ^self].
    dotIndex = anEmail size ifTrue: [errors add: 'Email must have characters after the dot'. ^self].
</body>
<body package="EmployeeManagement-Validation" selector="validateDepartment:errors:">
validateDepartment: aDepartment errors: errors
    | validDepartments |
    validDepartments := #('Engineering' 'Sales' 'Marketing' 'HR' 'Finance' 'Operations' 'IT' 'Legal').
    
    aDepartment ifNil: [errors add: 'Department cannot be nil'. ^self].
    aDepartment isEmpty ifTrue: [errors add: 'Department cannot be empty'. ^self].
    (validDepartments includes: aDepartment) ifFalse: [
        errors add: 'Department must be one of: ', (validDepartments joinSeparatedBy: ', ')
    ].
</body>
<body package="EmployeeManagement-Validation" selector="validateSalary:errors:">
validateSalary: aSalary errors: errors
    aSalary ifNil: [errors add: 'Salary cannot be nil'. ^self].
    aSalary <= 0 ifTrue: [errors add: 'Salary must be greater than 0'. ^self].
    aSalary > 1000000 ifTrue: [errors add: 'Salary cannot exceed 1,000,000'. ^self].
</body>
<body package="EmployeeManagement-Validation" selector="validateHireDate:errors:">
validateHireDate: aHireDate errors: errors
    aHireDate ifNil: [errors add: 'Hire date cannot be nil'. ^self].
    aHireDate > Date today ifTrue: [errors add: 'Hire date cannot be in the future'. ^self].
    aHireDate < (Date today subtractDays: 36500) ifTrue: [errors add: 'Hire date cannot be more than 100 years ago'. ^self].
</body>
<body package="EmployeeManagement-Validation" selector="validateSalaryIncrease:newSalary:">
validateSalaryIncrease: oldSalary newSalary: newSalary
    | errors increasePercent |
    errors := OrderedCollection new.
    
    (oldSalary notNil and: [newSalary notNil]) ifTrue: [
        newSalary < oldSalary ifTrue: [
            errors add: 'Salary decrease requires special approval'
        ].
        increasePercent := ((newSalary - oldSalary) / oldSalary) * 100.
        increasePercent > 50 ifTrue: [
            errors add: 'Salary increase cannot exceed 50% without special approval'
        ].
    ].
    
    ^errors
</body>
<body package="EmployeeManagement-Validation" selector="UpdateEmployeeValidator class>>new">
new
    ^super new
</body>
</methods>
</class>
</st-source>
